{"version":3,"sources":["store/todosStore.ts","store/currentUserStore.ts","store/filtersStore.ts","api/api.tsx","store/index.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["initialState","todos","isLoading","isInitialized","hasError","actions","type","payload","id","selectors","state","value","SET_USER","user","userReducer","action","query","status","API_URL","request","endPoint","options","fetch","then","response","ok","json","Error","statusText","result","data","deleteTodoFromServer","method","getUserFromServer","todosSelectors","filtersSelectors","filters","userSelectors","currentUser","dispatch","a","todosActions","todosFromServer","api","error","userActions","userFromServer","reducer","combineReducers","filter","todo","currentUserReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","children","selectedUserId","onSelect","useDispatch","titleQuery","useSelector","statusQuery","preparedTodos","title","toLowerCase","includes","completed","className","onChange","target","filtersActions","event","map","userId","key","classNames","readOnly","onClick","CurrentUser","onClear","name","email","phone","App","selectedUser","useEffect","selectUser","useCallback","clearUser","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27ee54e0.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nexport type Todo = {\n  id: number;\n  title: string;\n  userId: number;\n  completed: boolean;\n};\n\nexport type TodosState = {\n  todos: Todo[];\n  isLoading: boolean;\n  isInitialized: boolean;\n  hasError: boolean;\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  isLoading: false,\n  isInitialized: false,\n  hasError: false,\n};\n\nconst SET_TODOS = 'todos/SET_TODOS';\nconst DELETE_TODO = 'todos/DELETE_TODO';\nconst SET_ERROR = 'todos/SET_ERROR';\nconst ENABLE_LOADING = 'todos/ENABLE_LOADING';\nconst DISABLE_LOADING = 'todos/DISABLE_LOADING';\nconst INITIALIZE = 'todos/INITIALIZE';\nconst CANCEL_INITIALIZATION = 'todos/CANCEL_INITIALIZATION';\n\nexport const actions = {\n  setTodos: (todos: Todo[]) => ({\n    type: SET_TODOS,\n    payload: todos,\n  }),\n  deleteTodo: (id: number) => ({\n    type: DELETE_TODO,\n    payload: id,\n  }),\n  setError: (hasError: boolean) => ({\n    type: SET_ERROR,\n    payload: hasError,\n  }),\n  enableLoading: () => ({\n    type: ENABLE_LOADING,\n  }),\n  disableLoading: () => ({\n    type: DISABLE_LOADING,\n  }),\n  initialize: () => ({ type: INITIALIZE }),\n  cancelInitialization: () => ({\n    type: CANCEL_INITIALIZATION,\n  }),\n};\n\nexport const selectors = {\n  getTodos: (state: TodosState) => state.todos,\n  isLoading: (state: TodosState) => state.isLoading,\n  isInitialized: (state: TodosState) => state.isInitialized,\n  hasError: (state: TodosState) => state.hasError,\n};\n\nexport default (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case INITIALIZE:\n      return {\n        ...state,\n        isInitialized: true,\n      };\n    case CANCEL_INITIALIZATION:\n      return {\n        ...state,\n        isInitialized: false,\n      };\n    case ENABLE_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case DISABLE_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\n\nexport type User = {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n};\n\nexport type CurrentUserState = {\n  value: User | null;\n  isLoading: boolean;\n  isInitialized: boolean;\n  hasError: boolean;\n};\n\nconst initialState = {\n  value: null,\n  isLoading: false,\n  isInitialized: false,\n  hasError: false,\n};\n\nconst SET_USER = 'currentUser/SET_USER';\nconst SET_ERROR = 'currentUSer/SET_ERROR';\nconst ENABLE_LOADING = 'currentUser/ENABLE_LOADING';\nconst DISABLE_LOADING = 'currentUser/DISABLE_LOADING';\nconst INITIALIZE = 'currentUser/INITIALIZE';\nconst CANCEL_INITIALIZATION = 'currentUser/CANCEL_INITIALIZATION';\n\nexport const actions = {\n  setUser: (user: User | null) => ({\n    type: SET_USER,\n    payload: user,\n  }),\n  setError: (hasError: boolean) => ({\n    type: SET_ERROR,\n    payload: hasError,\n  }),\n  enableLoading: () => ({\n    type: ENABLE_LOADING,\n  }),\n  disableLoading: () => ({\n    type: DISABLE_LOADING,\n  }),\n  initialize: () => ({ type: INITIALIZE }),\n  cancelInitialization: () => ({\n    type: CANCEL_INITIALIZATION,\n  }),\n};\n\nexport const selectors = {\n  getUser: (state: CurrentUserState) => state.value,\n  getUserId: (state: CurrentUserState) => {\n    if (state.value) {\n      return state.value.id;\n    }\n\n    return null;\n  },\n  hasUser: (state: CurrentUserState) => !!state.value,\n  isLoading: (state: CurrentUserState) => state.isLoading,\n  isInitialized: (state: CurrentUserState) => state.isInitialized,\n  hasError: (state: CurrentUserState) => state.hasError,\n};\n\nconst userReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case INITIALIZE:\n      return {\n        ...state,\n        isInitialized: true,\n      };\n    case CANCEL_INITIALIZATION:\n      return {\n        ...state,\n        isInitialized: false,\n      };\n    case ENABLE_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case DISABLE_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    case SET_USER:\n      return {\n        ...state,\n        value: action.payload,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { AnyAction } from 'redux';\n\nexport type FiltersState = {\n  query: string;\n  status: string;\n};\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst SET_QUERY = 'filters/SET_QUERY';\nconst SET_STATUS = 'filters/SET_STATUS';\n\nexport const actions = {\n  setQuery: (query: string) => ({\n    type: SET_QUERY,\n    payload: query,\n  }),\n  setStatus: (status: string) => ({\n    type: SET_STATUS,\n    payload: status,\n  }),\n};\n\nexport const selectors = {\n  getQuery: (state: FiltersState) => state.query,\n  getStatus: (state: FiltersState) => state.status,\n};\n\nexport default (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (endPoint: string, options = {}) => (\n  fetch(`${API_URL}${endPoint}`, options)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.status}: ${response.statusText}`);\n    })\n    .then(result => result.data)\n);\n\nexport const getTodosFromServer = () => request('/todos');\n\nexport const deleteTodoFromServer = (id: number) => request(`/todos/${id}`, { method: 'DELETE' });\n\nexport const getUserFromServer = (id: number) => request(`/users/${id}`);\n","import {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport todosReducer, {\n  selectors as todosSelectors,\n  actions as todosActions,\n  TodosState,\n} from './todosStore';\n\nimport currentUserReducer, {\n  selectors as userSelectors,\n  actions as userActions,\n  CurrentUserState,\n} from './currentUserStore';\n\nimport filtersReducer, {\n  selectors as filtersSelectors,\n  FiltersState,\n} from './filtersStore';\n\nimport * as api from '../api/api';\n\nexport type RootState = {\n  todos: TodosState;\n  currentUser: CurrentUserState;\n  filters: FiltersState;\n};\n\nexport const selectors = {\n  getTodos: (state: RootState) => todosSelectors.getTodos(state.todos),\n  areTodosLoading: (state: RootState) => todosSelectors.isLoading(state.todos),\n  hasTodosError: (state: RootState) => todosSelectors.hasError(state.todos),\n  areTodosInitialized: (state: RootState) => todosSelectors.isInitialized(state.todos),\n\n  getTitleQuery: (state: RootState) => filtersSelectors.getQuery(state.filters),\n  getStatusQuery: (state: RootState) => filtersSelectors.getStatus(state.filters),\n\n  getUserId: (state: RootState) => userSelectors.getUserId(state.currentUser),\n  getUser: (state: RootState) => userSelectors.getUser(state.currentUser),\n};\n\nexport const actions = {\n  loadTodos: () => {\n    return async (dispatch: AppDispatch) => {\n      dispatch(todosActions.enableLoading());\n      dispatch(todosActions.setError(false));\n\n      try {\n        const todosFromServer = await api.getTodosFromServer();\n\n        dispatch(todosActions.setTodos(todosFromServer));\n        dispatch(todosActions.initialize());\n      } catch (error) {\n        dispatch(todosActions.setError(true));\n      } finally {\n        dispatch(todosActions.disableLoading());\n      }\n    };\n  },\n  clearTodos: () => {\n    return (dispatch: AppDispatch) => {\n      dispatch(todosActions.setTodos([]));\n      dispatch(todosActions.cancelInitialization());\n    };\n  },\n  deleteTodo: (id: number) => {\n    return async (dispatch: AppDispatch) => {\n      try {\n        api.deleteTodoFromServer(id);\n        dispatch(todosActions.deleteTodo(id));\n      } catch (error) {\n        dispatch(todosActions.setError(true));\n      }\n    };\n  },\n  loadUser: (id: number) => {\n    return async (dispatch: AppDispatch) => {\n      dispatch(userActions.enableLoading());\n      dispatch(userActions.setError(false));\n\n      try {\n        const userFromServer = await api.getUserFromServer(id);\n\n        dispatch(userActions.setUser(userFromServer));\n        dispatch(userActions.initialize());\n      } catch (error) {\n        dispatch(userActions.setError(true));\n      } finally {\n        dispatch(userActions.disableLoading());\n      }\n    };\n  },\n  clearUser: () => {\n    return (dispatch: AppDispatch) => {\n      dispatch(userActions.setUser(null));\n      dispatch(userActions.cancelInitialization());\n    };\n  },\n};\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n  currentUser: currentUserReducer,\n  filters: filtersReducer,\n});\n\nconst store = createStore(reducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../store/todosStore';\nimport { actions as filtersActions } from '../../store/filtersStore';\nimport { selectors, actions } from '../../store/index';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number | null;\n  onSelect: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  children,\n  todos,\n  selectedUserId,\n  onSelect,\n}) => {\n  const dispatch = useDispatch();\n  const titleQuery = useSelector(selectors.getTitleQuery);\n  const statusQuery = useSelector(selectors.getStatusQuery);\n\n  const preparedTodos = todos\n    .filter(\n      ({ title }) => title.toLowerCase().includes(titleQuery),\n    ).filter(\n      ({ completed }) => {\n        switch (statusQuery) {\n          case 'active':\n            return !completed;\n          case 'completed':\n            return completed;\n          default:\n            return true;\n        }\n      },\n    );\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label>\n        Search by title\n        <input\n          type=\"text\"\n          value={titleQuery}\n          onChange={({ target }) => {\n            dispatch(filtersActions.setQuery(target.value));\n          }}\n        />\n      </label>\n      &nbsp;\n      <select\n        value={statusQuery}\n        onChange={(event) => {\n          dispatch(filtersActions.setStatus(event.target.value));\n        }}\n      >\n        <option value=\"\">\n          Select todos\n        </option>\n        <option\n          value=\"all\"\n        >\n          All\n        </option>\n        <option\n          value=\"active\"\n        >\n          Active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          Completed\n        </option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodos.map(({\n            id, title, userId, completed,\n          }) => (\n            <li\n              key={id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--checked': completed,\n                'TodoList__item--unchecked': !completed,\n              })}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n              <div>\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'button--selected':\n                      userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelect(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n                &nbsp;\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actions.deleteTodo(id));\n                  }}\n                >\n                  delete\n                </button>\n              </div>\n            </li>\n          ))}\n          {children}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from '../../store/currentUserStore';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  onClear: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ children, user, onClear }) => {\n  return (\n    <div className=\"CurrentUser\">\n      {children}\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {user.id}\n        </span>\n      </h2>\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        className=\"CurrentUser__clear button\"\n        type=\"button\"\n        onClick={() => {\n          onClear();\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nimport { selectors, actions } from './store';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const todos = useSelector(selectors.getTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n  const selectedUser = useSelector(selectors.getUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actions.loadTodos());\n  }, [dispatch]);\n\n  const selectUser = useCallback((userId: number) => {\n    dispatch(actions.loadUser(userId));\n  }, [dispatch]);\n\n  const clearUser = useCallback(() => {\n    dispatch(actions.clearUser());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          onSelect={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUser ? (\n            <CurrentUser\n              user={selectedUser}\n              onClear={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}